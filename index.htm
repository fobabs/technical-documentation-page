<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Technical Documentation Page</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" type="text/css" media="screen" href="css/style.css" />
</head>
<body>
  <nav id="navbar">
    <header>JavaScript</header>
    <ul>
      <li><a class="nav-link" href="#Individual_or_Compiled">Individual or Compiled</a></li>
      <li><a class="nav-link" href="#Dependencies">Dependencies</a></li>
      <li><a class="nav-link" href="#Data_attributes">Data attributes</a></li>
      <li><a class="nav-link" href="#Events">Events</a></li>
      <li><a class="nav-link" href="#Programmatic_API">Programmatic API</a>
        <ul>
          <li><a href="#Asynchronous_functions_and_transitions">Asynchronous functions and transitions</a></li>
          <li><a href="#Default_settings">Default settings</a></li>
        </ul>
      </li>
      <li><a class="nav-link" href="#No_conflict">No conflict</a></li>
      <li><a class="nav-link" href="#Version_numbers">Version numbers</a></li>
      <li><a class="nav-link" href="#No_special_fallbacks_when_JavaScript_is_disabled">No special fallbacks when JavaScript is disabled</a></li>
      <li><a class="nav-link" href="#Util">Util</a></li>
    </ul>
  </nav>
  <main id="main-doc">
    <section class="main-section" id="Individual_or_Compiled">
      <header>Individual or Compiled</header>
      <article>
        <p>Plugins can be included individually (using Bootstrap’s individual <code>js/dist/*.js</code>), or all at once using <code>bootstrap.js</code> or the minified <code>bootstrap.min.js</code> (don’t include both).</p>
        <p>If you use a bundler (Webpack, Rollup…), you can use <code>/js/dist/*.js</code> files which are UMD ready.</p>
      </article>
    </section>
    <section class="main-section" id="Dependencies">
      <header>Dependencies</header>
      <article>
        <p>Some plugins and CSS components depend on other plugins. If you include plugins individually, make sure to check for these dependencies in the docs. Also note that <b>all plugins depend on jQuery</b> (this means jQuery must be included <b>before</b> the plugin files). 
          <a href="https://github.com/twbs/bootstrap/blob/v4.1.3/package.json">Consult our package.json</a>
          to see which versions of jQuery are supported.
        </p>
        <p>Our dropdowns, popovers and tooltips also depend on <a href="https://popper.js.org/">Popper.js</a>.</p>
      </article>
    </section>
    <section class="main-section" id="Data_attributes">
      <header>Data attributes</header>
      <article>
        <p>Nearly all Bootstrap plugins can be enabled and configured through HTML alone with data attributes (our preferred way of using JavaScript functionality). Be sure to <b>only use one set of data attributes on a single element</b> (e.g., you cannot trigger a tooltip and modal from the same button.)</p>
        <p>However, in some situations it may be desirable to disable this functionality. To disable the data attribute API, unbind all events on the document namespaced with <code>data-api</code> like so:</p>
        <pre><code class="codes">$(document).off('.data-api')</code></pre>
        <p>Alternatively, to target a specific plugin, just include the plugin’s name as a namespace along with the data-api namespace like this:</p>
        <pre><code class="codes">$(document).off('.alert.data-api')</code></pre>
        <br />
        <div class="jumbotron">
          <strong>Escaping selectors</strong>
          <p>If you use special selectors, for example: <code>collapse:Example</code>, be sure to escape them, because they’ll be passed through jQuery.</p>
        </div>
      </article>
      <br />
    </section>
    <section class="main-section" id="Events">
      <header>Events</header>
      <article>
        <p>Bootstrap provides custom events for most plugins’ unique actions. Generally, these come in an infinitive and past participle form - where the infinitive (ex. <code>show</code>) is triggered at the start of an event, and its past participle form (ex. <code>shown</code>) is triggered on the completion of an action.</p>
        <p>All infinitive events provide 
          <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault">preventDefault()</a> 
          functionality. This provides the ability to stop the execution of an action before it starts. Returning false from an event handler will also automatically call <code>preventDefault()</code>.
        </p>
        <pre><code class="codes">$('#myModal').on('show.bs.modal', function (e) {
  if (!data) return e.preventDefault() // stops modal from being shown
})
</code></pre>
      </article>
    </section>
    <br />
    <section class="main-section" id="Programmatic_API">
      <header>Programmatic API</header>
      <article>
        <p>We also believe you should be able to use all Bootstrap plugins purely through the JavaScript API. All public APIs are single, chainable methods, and return the collection acted upon.</p>
        <pre><code class="codes">$('.btn.danger').button('toggle').addClass('fat')</code></pre>
        <p>All methods should accept an optional options object, a string which targets a particular method, or nothing (which initiates a plugin with default behavior):</p>
        <pre><code class="codes">$('#myModal').modal()                      // initialized with defaults
$('#myModal').modal({ keyboard: false })   // initialized with no keyboard
$('#myModal').modal('show')                // initializes and invokes show immediately
</code></pre>
        <p>Each plugin also exposes its raw constructor on a <code>Constructor</code> property: <code>$.fn.popover.Constructor</code>. If you’d like to get a particular plugin instance, retrieve it directly from an element: <code>$('[rel="popover"]').data('popover')</code>.</p>
        <section class="sub-section" id="Asynchronous_functions_and_transitions">
          <header class="sub-header">Asynchronous functions and transitions</header>
          <article>
            <p>All programmatic API methods are asynchronous and returns to the caller once the transition is started but <b>before it ends</b>.</p>
            <p>In order to execute an action once the transition is complete, you can listen to the corresponding event.</p>
            <pre><code class="codes">$('#myCollapse').on('shown.bs.collapse', function (e) {
  // Action to execute once the collapsible area is expanded
})
</code></pre>
            <p>In addition a method call on a <b>transitioning component will be ignored</b>.</p>
            <pre><code class="codes">$('#myCarousel').on('slid.bs.carousel', function (e) {
  $('#myCarousel').carousel('2') // Will slide to the slide 2 as soon as the transition to slide 1 is finished
})
                
$('#myCarousel').carousel('1') // Will start sliding to the slide 1 and returns to the caller
$('#myCarousel').carousel('2') // !! Will be ignored, as the transition to the slide 1 is not finished !!
</code></pre>
          </article>
        </section>
        <br />
        <section class="sub-section" id="Default_settings">
          <header class="sub-header">Default settings</header>
          <article>
            <p>You can change the default settings for a plugin by modifying the plugin’s <code>Constructor.Default</code> object:</p>
            <pre><code class="codes">$.fn.modal.Constructor.Default.keyboard = false // changes default for the modal plugin's `keyboard` option to false</code></pre>
          </article>
        </section>
      </article>
    </section>
    <br />
    <section class="main-section" id="No_conflict">
      <header>No conflict</header>
      <article>
        <p>Sometimes it is necessary to use Bootstrap plugins with other UI frameworks. In these circumstances, namespace collisions can occasionally occur. If this happens, you may call <code>.noConflict</code> on the plugin you wish to revert the value of.</p>
        <pre><code class="codes">var bootstrapButton = $.fn.button.noConflict() // return $.fn.button to previously assigned value
$.fn.bootstrapBtn = bootstrapButton            // give $().bootstrapBtn the Bootstrap functionality
</code></pre>
      </article>
    </section>
    <br />
    <section class="main-section" id="Version_numbers">
      <header>Version numbers</header>
      <article>
        <p>The version of each of Bootstrap’s jQuery plugins can be accessed via the <code>VERSION</code> property of the plugin’s constructor. For example, for the tooltip plugin:</p>
        <pre><code class="codes">$.fn.tooltip.Constructor.VERSION // => "4.1.3"</code></pre>
      </article>
    </section>
    <br />
    <section class="main-section" id="No_special_fallbacks_when_JavaScript_is_disabled">
      <header>No special fallbacks when JavaScript is disabled</header>
      <article>
        <p>Bootstrap’s plugins don’t fall back particularly gracefully when JavaScript is disabled. If you care about the user experience in this case, use 
          <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript">noscript</a> 
          to explain the situation (and how to re-enable JavaScript) to your users, and/or add your own custom fallbacks.
        </p>
        <div class="jumbotron">
          <strong>Third-party libraries</strong>
          <p>
            <b>Bootstrap does not officially support third-party JavaScript libraries</b> like Prototype or jQuery UI. Despite <code>.noConflict</code> and namespaced events, there may be compatibility problems that you need to fix on your own.
          </p>
        </div>
      </article>
      <br />
    </section>
    <section class="main-section" id="Util">
      <header>Util</header>
      <article>
        <p>All Bootstrap’s JavaScript files depend on <code>util.js</code> and it has to be included alongside the other JavaScript files. If you’re using the compiled (or minified) <code>bootstrap.js</code>, there is no need to include this—it’s already there.</p>
        <p><code>util.js</code> includes utility functions and a basic helper for <code>transitionEnd</code> events as well as a CSS transition emulator. It’s used by the other plugins to check for CSS transition support and to catch hanging transitions.</p>
      </article>
    </section>
    <br />
    <section id="lower-section">
      <div id="lower-section-footer">
        <ul>
          <li>&copy; 2011–2018 Twitter, Inc.</li>
          <li>&copy; 2011–2018 The Bootstrap Authors</li>
          <li>Code licensed under the MIT License.</li>
          <li>Documentation licensed under the Creative Commons Attribution License v3.0.</li>
          <li><a href="https://getbootstrap.com/docs/4.1/getting-started/javascript/">https://getbootstrap.com/docs/4.1/getting-started/javascript/</a></li>
        </ul>
      </div>
    </section>
  </main>
  <br />
  <footer>
    <ul>
      <li id="icon"><a href="https://devdocs.io/bootstrap~4/">Bootstrap 4</a></li>
      <li><a href="https://devdocs.io/bootstrap~4-getting-started/">Getting started</a></li>
      <li>JavaScript</li>
    </ul>
  </footer>
  <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>
</body>
</html>